from modules.io import read_words, write_file
from modules.pattern import get_pattern
from modules.waiting import Clock

def generate_patterns():
    return generate_patterns_rec("", 5)

def generate_patterns_rec(p, depth):
    if depth == 0:
        return [p]
    
    ps = []
    for c in "gob":
        ps += generate_patterns_rec(p + c, depth - 1)
    return ps

def generate_real_patterns():
    words = read_words("../save/word_origin.pl")
    return {word: generate_word_patterns(words, word) for word in words}

def generate_word_patterns(words, word):
    return list(set([get_pattern(soluce, word) for soluce in words]))

if __name__ == "__main__":
    writer = write_file("data/precalculated.py")
    clock = Clock()
    clock.start()

    # All 243 possible patterns
    print("Generating all 243 possible patterns")
    patterns = "', '".join(generate_patterns())
    writer.write_line("# All 243 possible patterns (Some may never be valid ones)")
    writer.write_line("all_patterns = ['{}']".format(patterns))
    writer.write_line("")
    print(f"Done in {clock.get_str_time()}")

    # All patterns generated by compairing each words to all the other words as if they are the solution and removing duplicates
    clock.start()
    print("Generating all real patterns")
    rpatterns = generate_real_patterns()
    lines = ["\t'{}': ['{}']".format(w, "', '".join(rpatterns[w])) for w in rpatterns]
    patterns = ",\n".join(lines)
    writer.write_line("# All patterns generated by compairing each words to all the other words as if they are the solution and removing duplicates")
    writer.write_line("all_real_patterns = {")
    writer.write_line(patterns)
    writer.write_line("}")
    print(f"Done in {clock.get_str_time()}")
    
    writer.close()